
BUILD_OWN_RTOS_SECTION_3_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800056c  0800056c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  0800056c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000578  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000578  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001eda  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000680  00000000  00000000  00021f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00022590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  000226f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019435  00000000  00000000  00022808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a80  00000000  00000000  0003bc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c81a  00000000  00000000  0003d6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003cc  00000000  00000000  000c9f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000554 	.word	0x08000554

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000554 	.word	0x08000554

080001e8 <RCC_Config>:
#define GREEN		(1U<<12)



void RCC_Config(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/* Enable GPIO Port D */
	RCC->AHB1ENR |= GPIOD_CLOCK;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <RCC_Config+0x1c>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <RCC_Config+0x1c>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	//RCC->CR |= (1U<<16);

	/* Check HSE ready */
	//while(!((RCC->CR) & (1U<<17)));

}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40023800 	.word	0x40023800

08000208 <GPIO_Config>:

void GPIO_Config(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	GPIOD->MODER |= GREEN_BIT| ORANGE_BIT| RED_BIT| BLUE_BIT;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <GPIO_Config+0x1c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <GPIO_Config+0x1c>)
 8000212:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40020c00 	.word	0x40020c00

08000228 <LED_BLUE_ON>:

void LED_BLUE_ON(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	GPIOD->ODR |= BLUE;
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <LED_BLUE_ON+0x1c>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a04      	ldr	r2, [pc, #16]	; (8000244 <LED_BLUE_ON+0x1c>)
 8000232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000236:	6153      	str	r3, [r2, #20]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40020c00 	.word	0x40020c00

08000248 <LED_BLUE_OFF>:

void LED_BLUE_OFF(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~BLUE;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <LED_BLUE_OFF+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <LED_BLUE_OFF+0x1c>)
 8000252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <LED_RED_ON>:

void LED_RED_ON(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	GPIOD->ODR |= RED;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <LED_RED_ON+0x1c>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <LED_RED_ON+0x1c>)
 8000272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000276:	6153      	str	r3, [r2, #20]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00

08000288 <main>:
void red_led_on(void);
void red_led_off(void);


int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	RCC_Config();
 800028c:	f7ff ffac 	bl	80001e8 <RCC_Config>
	GPIO_Config();
 8000290:	f7ff ffba 	bl	8000208 <GPIO_Config>
	UART_TRANSMIT_Config();
 8000294:	f000 f89a 	bl	80003cc <UART_TRANSMIT_Config>
	YTY_TIME_BASE_INIT();
 8000298:	f000 f86c 	bl	8000374 <YTY_TIME_BASE_INIT>
	while(1)
	{
		blue_led_on();
 800029c:	f000 f80e 	bl	80002bc <blue_led_on>
		YTY_Delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f81d 	bl	80002e0 <YTY_Delay>
		blue_led_off();
 80002a6:	f000 f80f 	bl	80002c8 <blue_led_off>
		YTY_Delay(1);
 80002aa:	2001      	movs	r0, #1
 80002ac:	f000 f818 	bl	80002e0 <YTY_Delay>
		red_led_on();
 80002b0:	f000 f810 	bl	80002d4 <red_led_on>
		YTY_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 f813 	bl	80002e0 <YTY_Delay>
		blue_led_on();
 80002ba:	e7ef      	b.n	800029c <main+0x14>

080002bc <blue_led_on>:
	}
}


void blue_led_on(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	LED_BLUE_ON();
 80002c0:	f7ff ffb2 	bl	8000228 <LED_BLUE_ON>
	//printf("Motor is running\n");
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <blue_led_off>:

void blue_led_off(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	LED_BLUE_OFF();
 80002cc:	f7ff ffbc 	bl	8000248 <LED_BLUE_OFF>
	//printf("Motor is stopping\n");
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <red_led_on>:

void red_led_on(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	LED_RED_ON();
 80002d8:	f7ff ffc6 	bl	8000268 <LED_RED_ON>
	//printf("Motor is openning\n");
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <YTY_Delay>:
volatile uint32_t g_curr_tick_prime;
volatile uint32_t tick_freq = 1;

/* Parameter takes value in seconds */
void YTY_Delay(uint32_t delay)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	uint32_t tickStart = Get_Tick();
 80002e8:	f000 f82e 	bl	8000348 <Get_Tick>
 80002ec:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60fb      	str	r3, [r7, #12]
	if(wait < MAX_DELAY)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002f8:	d004      	beq.n	8000304 <YTY_Delay+0x24>
	{
		wait += tick_freq;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <YTY_Delay+0x40>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	4413      	add	r3, r2
 8000302:	60fb      	str	r3, [r7, #12]
	}

	while((Get_Tick() - tickStart) < wait){}
 8000304:	bf00      	nop
 8000306:	f000 f81f 	bl	8000348 <Get_Tick>
 800030a:	4602      	mov	r2, r0
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	429a      	cmp	r2, r3
 8000314:	d8f7      	bhi.n	8000306 <YTY_Delay+0x26>

}
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000000 	.word	0x20000000

08000324 <Tick_Increment>:

void Tick_Increment(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	g_curr_tick += tick_freq;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <Tick_Increment+0x1c>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <Tick_Increment+0x20>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4413      	add	r3, r2
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <Tick_Increment+0x20>)
 8000334:	6013      	str	r3, [r2, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	20000000 	.word	0x20000000
 8000344:	20000020 	.word	0x20000020

08000348 <Get_Tick>:

uint32_t Get_Tick(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
}
 800034e:	bf00      	nop
	__disable_irq();
	g_curr_tick_prime = g_curr_tick;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <Get_Tick+0x24>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <Get_Tick+0x28>)
 8000356:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000358:	b662      	cpsie	i
}
 800035a:	bf00      	nop
	__enable_irq();

	return g_curr_tick_prime;
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <Get_Tick+0x28>)
 800035e:	681b      	ldr	r3, [r3, #0]
}
 8000360:	4618      	mov	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000020 	.word	0x20000020
 8000370:	20000024 	.word	0x20000024

08000374 <YTY_TIME_BASE_INIT>:

void YTY_TIME_BASE_INIT(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	/* Reload the timer with number of cycles per second */

	/* I wrote -1 because it becomes from 0 */
	SysTick->LOAD = ONE_SEC_LOAD - 1 ;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <YTY_TIME_BASE_INIT+0x48>)
 800037c:	605a      	str	r2, [r3, #4]

	/* Clear Systick Current value register */
	SysTick->VAL = 0 ;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |=  CTRL_CLCKSRC ;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6013      	str	r3, [r2, #0]

	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICK_IT;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6013      	str	r3, [r2, #0]

	/* Enable Systick */
	SysTick->CTRL |= CTRL_EN;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <YTY_TIME_BASE_INIT+0x44>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003a8:	b662      	cpsie	i
}
 80003aa:	bf00      	nop

	/* Enable Global Interrupt */
	__enable_irq();

}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000e010 	.word	0xe000e010
 80003bc:	00f423ff 	.word	0x00f423ff

080003c0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	Tick_Increment();
 80003c4:	f7ff ffae 	bl	8000324 <Tick_Increment>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <UART_TRANSMIT_Config>:
{
	UART_WRITE(ch);
	return ch;
}
void UART_TRANSMIT_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	/* Enable Clock Access to GPIOA */
	/* USART2_TX -> PA2 */
	RCC->AHB1ENR |= GPIOA_CLOCK;
 80003d0:	4b21      	ldr	r3, [pc, #132]	; (8000458 <UART_TRANSMIT_Config+0x8c>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a20      	ldr	r2, [pc, #128]	; (8000458 <UART_TRANSMIT_Config+0x8c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA2 pin as alternate function */
	GPIOA->MODER &= ~(1U<<4);
 80003dc:	4b1f      	ldr	r3, [pc, #124]	; (800045c <UART_TRANSMIT_Config+0x90>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <UART_TRANSMIT_Config+0x90>)
 80003e2:	f023 0310 	bic.w	r3, r3, #16
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <UART_TRANSMIT_Config+0x90>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1b      	ldr	r2, [pc, #108]	; (800045c <UART_TRANSMIT_Config+0x90>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6013      	str	r3, [r2, #0]


	/* Set alternate function type to AF7(UART2_TX -> From Alternate Function Mapping) */
	/* ARF[0] -> ARFLow ARF[1] -> ARFHigh */
	GPIOA->AFR[0] |= (1U<<8);
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <UART_TRANSMIT_Config+0x90>)
 80003f6:	6a1b      	ldr	r3, [r3, #32]
 80003f8:	4a18      	ldr	r2, [pc, #96]	; (800045c <UART_TRANSMIT_Config+0x90>)
 80003fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <UART_TRANSMIT_Config+0x90>)
 8000402:	6a1b      	ldr	r3, [r3, #32]
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <UART_TRANSMIT_Config+0x90>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <UART_TRANSMIT_Config+0x90>)
 800040e:	6a1b      	ldr	r3, [r3, #32]
 8000410:	4a12      	ldr	r2, [pc, #72]	; (800045c <UART_TRANSMIT_Config+0x90>)
 8000412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000416:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11); /* GPIOA->ARF[0] &= (1U<<11) */
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <UART_TRANSMIT_Config+0x90>)
 800041a:	6a1b      	ldr	r3, [r3, #32]
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <UART_TRANSMIT_Config+0x90>)
 800041e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000422:	6213      	str	r3, [r2, #32]

	/* Enable Clock Access to UART*/
	RCC->APB1ENR |= UART2_EN;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <UART_TRANSMIT_Config+0x8c>)
 8000426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <UART_TRANSMIT_Config+0x8c>)
 800042a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800042e:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configure boundrate */
	UART_SET_BAUDRATE(APB1_CLOCK,UART_BAUDRATE);
 8000430:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <UART_TRANSMIT_Config+0x94>)
 8000436:	f000 f817 	bl	8000468 <UART_SET_BAUDRATE>
	/* Configure Transfer Direction */
	USART2->CR1 |= UART_CR1_REGISTER_TE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <UART_TRANSMIT_Config+0x98>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <UART_TRANSMIT_Config+0x98>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	60d3      	str	r3, [r2, #12]

	/* Enable UART Module */
	USART2->CR1 |= UART_CR1_ENABLE;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <UART_TRANSMIT_Config+0x98>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <UART_TRANSMIT_Config+0x98>)
 800044c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000450:	60d3      	str	r3, [r2, #12]
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40023800 	.word	0x40023800
 800045c:	40020000 	.word	0x40020000
 8000460:	00f42400 	.word	0x00f42400
 8000464:	40004400 	.word	0x40004400

08000468 <UART_SET_BAUDRATE>:
	USART2->DR = (ch & 0xFF);
}


static void UART_SET_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	USART2->BRR = COMPUTE_UART_BAUDRATE(peripheralClock, baudRate);
 8000472:	6839      	ldr	r1, [r7, #0]
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 f80b 	bl	8000490 <COMPUTE_UART_BAUDRATE>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <UART_SET_BAUDRATE+0x24>)
 8000480:	609a      	str	r2, [r3, #8]
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40004400 	.word	0x40004400

08000490 <COMPUTE_UART_BAUDRATE>:


static uint16_t COMPUTE_UART_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	return ((peripheralClock + (baudRate / 2))/ baudRate);
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	085a      	lsrs	r2, r3, #1
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	441a      	add	r2, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a8:	b29b      	uxth	r3, r3

}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	; (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	; (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e6:	f000 f811 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff fecd 	bl	8000288 <main>

080004ee <LoopForever>:

LoopForever:
    b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   r0, =_estack
 80004f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004fc:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 8000500:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000504:	20000028 	.word	0x20000028

08000508 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC_IRQHandler>
	...

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	4d0d      	ldr	r5, [pc, #52]	; (8000544 <__libc_init_array+0x38>)
 8000510:	4c0d      	ldr	r4, [pc, #52]	; (8000548 <__libc_init_array+0x3c>)
 8000512:	1b64      	subs	r4, r4, r5
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	2600      	movs	r6, #0
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	4d0b      	ldr	r5, [pc, #44]	; (800054c <__libc_init_array+0x40>)
 800051e:	4c0c      	ldr	r4, [pc, #48]	; (8000550 <__libc_init_array+0x44>)
 8000520:	f000 f818 	bl	8000554 <_init>
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	2600      	movs	r6, #0
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	0800056c 	.word	0x0800056c
 8000548:	0800056c 	.word	0x0800056c
 800054c:	0800056c 	.word	0x0800056c
 8000550:	08000570 	.word	0x08000570

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
